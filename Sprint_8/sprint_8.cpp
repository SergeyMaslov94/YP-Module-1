// ТУТ ЕСТЬ ГЕНЕРАТОРЫ И БЕНЧМАРКИ!!!!

//#include "Topic_1/lesson_1.hpp"
#include "Topic_1/lesson_2.hpp"
#include "Topic_1/lesson_3.hpp"
#include "Topic_1/lesson_4.hpp"
#include "Topic_1/lesson_5.hpp"
#include "Topic_1/lesson_6.hpp"
//============================================
int main() {
	//lesson_1();  // применим макросы, чтобы измерить время последовательного и параллельного алгоритмов сортировки документов

	// TRANSFORM_REDUCE!!! execution::par!!!!!
	//lesson_2(); // паралельно расчитываем кол-во пробелов в строке используя стандартную функцию библиотек stl count(execution::par, str.begin(), str.end(), ' ') + 1;
			    // паралельно расчитываем кол-во пробелов в строке используя концепцию MapReduce
		
	// концепция MapReduce: transform и reduce
	// концепция MapReduce: transform_reduce
	//lesson_3(); 
		/*
		Map-стадия:
			Вход: набор символов строки;
			Операция: будет ли конкретный символ пробелом? Если да — 1. Если нет — 0;
			Выход: набор чисел 0 и 1, где 1 означает, что соответствующий символ — пробел.
		Reduce-стадия:
			Вход: набор чисел 0 и 1;
			Операция: сумма;
			Выход: количество единиц во входном наборе, то есть количество пробелов.
		*/

	// Scan-алгоритмы ЧТО-ТО ВРОДЕ ПАРАЛЛЕЛЬНОГО CUMSUM???
	/*
		inclusive_scan 
		возвращает первый элемент, сумму первых двух, первых трёх, 
		а последней — сумму всех. То есть i-я сумма включает в себя i-й элемент.

		 exclusive_scan 
		 возвращает начальный элемент (например, 0), первый, сумму
		 первых двух, а последней — сумму всех, кроме последнего. То есть i-я сумма
		 не включает i-й элемент.
	*/
	//lesson_4(); 

	// ПАРАЛЛЕЛИМ ЗАПРОСЫ К ПОИСКОВОЙ СИСТЕМЕ
	//lesson_5(); 
	lesson_6();

	return 0;
}
